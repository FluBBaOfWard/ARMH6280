/*
 Hudson/NEC HuC6280 CPU emulator
*/

#ifdef __arm__

#include "H6280mac.h"

	.syntax unified
	.arm

#ifdef ARM9
	.section .itcm				;@ For the NDS
#elif GBA
	.section .iwram				;@ For the GBA
#else
	.section .text
#endif

	.global h6280Reset
	.global h6280SetNMIPin
	.global h6280SetIRQPin
	.global h6280RestoreAndRunXCycles
	.global h6280RunXCycles
	.global h6280Go
	.global h6280CheckIrqDisable
	.global h6280OpTable
	.global opCodeEnd
	.global outOfCycles
	.global huMapper
	.global SF2Mapper
	.global irqRead
	.global irqWrite
	.global timerRead
	.global timerWrite
	.global translatePCToOffset
	.global reInitMapperData

	.global _10
	.global _30
	.global _4C
	.global _50
	.global _58
	.global _70
	.global _80
	.global _90
	.global _B0
	.global _D0
	.global _F0
	.global _E3

	alignOpCode
h6280StateStart:
	;@ Group these together for save/loadstate
	.space 8*4	;@ cpuregs (nz,a,x,y,sp,cycles,pc,zp)
	.space 8	;@ h6280mapperstate
	.long 0 	;@ h6280TimerCycles
	.long 0 	;@ h6280IrqPending
	.byte 0 	;@ h6280IrqDisable
	.byte 0		;@ h6280IoBuffer		Reads from $0800 -> $17ff
	.byte 0		;@ h6280TimerLatch		From IO 0x0C00
	.byte 0		;@ h6280TimerEnable		From IO 0x0C01
	.byte 0		;@ h6280ClockSpeed
	.byte 0		;@ h6280NMIPin
	.space 2	;@ h6280Padding
h6280StateEnd:
	.long 0		;@ h6280LastBank:		Last memmap added to PC (used to calculate current PC)
	.long 0 	;@ h6280OldCycles:		Backup of cycles
	.long 0		;@ h6280NextTimeout:	Jump here when cycles runs out
	.long 0 	;@ h6280NextTimeout_:	Backup of nexttimeout
	.space 8*4	;@ h6280RomMap

	alignOpCode
h6280OpTable:
;@----------------------------------------------------------------------------
_00:	;@ BRK				error?
;@----------------------------------------------------------------------------
	sub h6280pc,h6280pc,#1
	reEncodePC
	ldrb r0,[h6280pc]
	cmp r0,#0					;@ Real BRK?
	beq doBRK
h6280Go:
	fetch 0
	.pool
;@----------------------------------------------------------------------------
	alignOpCode
_01:	;@ ORA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opORA 7
;@----------------------------------------------------------------------------
	alignOpCode
_02:	;@ SXY swap X & Y
;@----------------------------------------------------------------------------
	opSWAP h6280x,h6280y
;@----------------------------------------------------------------------------
	alignOpCode
_03:	;@ ST0 #$nn			Store immediate value at VDC port#0
;@----------------------------------------------------------------------------
	readmemimm
	bl VDC0W
	fetch 5						;@ 4+1
;@----------------------------------------------------------------------------
	alignOpCode
_04:	;@ TSB $nn
;@----------------------------------------------------------------------------
	doZ
	opTSB 6
;@----------------------------------------------------------------------------
	alignOpCode
_05:	;@ ORA $nn
;@----------------------------------------------------------------------------
	doZ
	opORA 4
;@----------------------------------------------------------------------------
	alignOpCode
_06:	;@ ASL $nn
;@----------------------------------------------------------------------------
	doZ
	opASL 6
;@----------------------------------------------------------------------------
	alignOpCode
_07:	;@ RMB0
;@----------------------------------------------------------------------------
	opRMB 0
;@----------------------------------------------------------------------------
	alignOpCode
_08:	;@ PHP
;@----------------------------------------------------------------------------
	encodeP (B)
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
	alignOpCode
_09:	;@ ORA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opORA 2
;@----------------------------------------------------------------------------
	alignOpCode
_0A:	;@ ASL
;@----------------------------------------------------------------------------
	adds h6280a,h6280a,h6280a
	orr cycles,cycles,#CYC_C	;@ Prepare C
	getNextOpcode
	mov h6280nz,h6280a,asr#24	;@ NZ
	executeOpCode_c 2			;@ Also subs carry
;@----------------------------------------------------------------------------
	alignOpCode
_0B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_0C:	;@ TSB $nnnn
;@----------------------------------------------------------------------------
	doABS
	opTSB 7
;@----------------------------------------------------------------------------
	alignOpCode
_0D:	;@ ORA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opORA 5
;@----------------------------------------------------------------------------
	alignOpCode
_0E:	;@ ASL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opASL 7
;@----------------------------------------------------------------------------
	alignOpCode
_0F:	;@ BBR0 $nn,*
;@----------------------------------------------------------------------------
	opBBRx 0
;@----------------------------------------------------------------------------
	alignOpCode
_10:	;@ BPL *
;@----------------------------------------------------------------------------
	opBPL
;@----------------------------------------------------------------------------
	alignOpCode
_11:	;@ ORA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opORA 7
;@----------------------------------------------------------------------------
	alignOpCode
_12:	;@ ORA ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opORA 7
;@----------------------------------------------------------------------------
	alignOpCode
_13:	;@ ST1 #$nn			Store immediate value at VDC port#1
;@----------------------------------------------------------------------------
	readmemimm
	ldr r1,=vdcRegPtrL_			;@ What function
	adr lr,_130
	ldr pc,[r1]					;@ What function
_130:
	fetch 5						;@ 4+1
	.pool
;@----------------------------------------------------------------------------
	alignOpCode
_14:	;@ TRB $nn
;@----------------------------------------------------------------------------
	doZ
	opTRB 6
;@----------------------------------------------------------------------------
	alignOpCode
_15:	;@ ORA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opORA 4
;@----------------------------------------------------------------------------
	alignOpCode
_16:	;@ ASL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opASL 6
;@----------------------------------------------------------------------------
	alignOpCode
_17:	;@ RMB1
;@----------------------------------------------------------------------------
	opRMB 1
;@----------------------------------------------------------------------------
	alignOpCode
_18:	;@ CLC
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#CYC_C
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_19:	;@ ORA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opORA 5
;@----------------------------------------------------------------------------
	alignOpCode
_1A:	;@ INA
;@----------------------------------------------------------------------------
	add h6280a,h6280a,#0x01000000
	getNextOpcode
	mov h6280nz,h6280a,asr#24		;@ NZ
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_1B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_1C:	;@ TRB $nnnn
;@----------------------------------------------------------------------------
	doABS
	opTRB 7
;@----------------------------------------------------------------------------
	alignOpCode
_1D:	;@ ORA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opORA 5
;@----------------------------------------------------------------------------
	alignOpCode
_1E:	;@ ASL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opASL 7
;@----------------------------------------------------------------------------
	alignOpCode
_1F:	;@ BBR1 $nn,*
;@----------------------------------------------------------------------------
	opBBR 1
;@----------------------------------------------------------------------------
	alignOpCode
_20:	;@ JSR $nnnn
;@----------------------------------------------------------------------------
	loadLastBank r0
	ldrb r1,[h6280pc],#1
	ldrb r2,[h6280pc]
	sub r0,h6280pc,r0
	orr h6280pc,r1,r2,lsl#8
	push16
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
	alignOpCode
_21:	;@ AND ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opAND 7
;@----------------------------------------------------------------------------
	alignOpCode
_22:	;@ SAX swap A & X
;@----------------------------------------------------------------------------
	opSWAP h6280a,h6280x
;@----------------------------------------------------------------------------
	alignOpCode
_23:	;@ ST2 #$nn			Store immediate value at VDC port#2
;@----------------------------------------------------------------------------
	readmemimm
	ldr r1,=vdcRegPtrH_			;@ What function
	adr lr,_230
	ldr pc,[r1]					;@ What function
_230:
	fetch 5						;@ 4+1
	.pool
;@----------------------------------------------------------------------------
	alignOpCode
_24:	;@ BIT $nn
;@----------------------------------------------------------------------------
	doZ
	opBIT 4
;@----------------------------------------------------------------------------
	alignOpCode
_25:	;@ AND $nn
;@----------------------------------------------------------------------------
	doZ
	opAND 4
;@----------------------------------------------------------------------------
	alignOpCode
_26:	;@ ROL $nn
;@----------------------------------------------------------------------------
	doZ
	opROL 6
;@----------------------------------------------------------------------------
	alignOpCode
_27:	;@ RMB2
;@----------------------------------------------------------------------------
	opRMB 2
;@----------------------------------------------------------------------------
	alignOpCode
_28:	;@ PLP
;@----------------------------------------------------------------------------
	pop8 r0
	decodePF
;@	eatcycles 4
;@	b H6280_checkirqdisable		;@ Fixes? Breaks "Maniac Pro wrestling"
	fetch 4
;@----------------------------------------------------------------------------
	alignOpCode
_29:	;@ AND #$nn
;@----------------------------------------------------------------------------
	doIMM
	opAND 2
;@----------------------------------------------------------------------------
	alignOpCode
_2A:	;@ ROL
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1	;@ Get C
	orrcs h6280a,h6280a,#0x00800000
	adds h6280a,h6280a,h6280a
	adc cycles,cycles,cycles	;@ Set C
	getNextOpcode
	mov h6280nz,h6280a,asr#24	;@ NZ
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_2B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_2C:	;@ BIT $nnnn
;@----------------------------------------------------------------------------
	doABS
	opBIT 5
;@----------------------------------------------------------------------------
	alignOpCode
_2D:	;@ AND $nnnn
;@----------------------------------------------------------------------------
	doABS
	opAND 5
;@----------------------------------------------------------------------------
	alignOpCode
_2E:	;@ ROL $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROL 7
;@----------------------------------------------------------------------------
	alignOpCode
_2F:	;@ BBR2 $nn,*
;@----------------------------------------------------------------------------
	opBBR 2
;@----------------------------------------------------------------------------
	alignOpCode
_30:	;@ BMI
;@----------------------------------------------------------------------------
	opBMI
;@----------------------------------------------------------------------------
	alignOpCode
_31:	;@ AND ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opAND 7
;@----------------------------------------------------------------------------
	alignOpCode
_32:	;@ AND ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opAND 7
;@----------------------------------------------------------------------------
	alignOpCode
_33:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_34:	;@ BIT $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opBIT 4
;@----------------------------------------------------------------------------
	alignOpCode
_35:	;@ AND $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opAND 4
;@----------------------------------------------------------------------------
	alignOpCode
_36:	;@ ROL $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROL 6
;@----------------------------------------------------------------------------
	alignOpCode
_37:	;@ RMB3
;@----------------------------------------------------------------------------
	opRMB 3
;@----------------------------------------------------------------------------
	alignOpCode
_38:	;@ SEC
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#CYC_C
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_39:	;@ AND $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opAND 5
;@----------------------------------------------------------------------------
	alignOpCode
_3A:	;@ DEA
;@----------------------------------------------------------------------------
	sub h6280a,h6280a,#0x01000000
	getNextOpcode
	mov h6280nz,h6280a,asr#24		;@ NZ
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_3B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_3C:	;@ BIT $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opBIT 5
;@----------------------------------------------------------------------------
	alignOpCode
_3D:	;@ AND $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opAND 5
;@----------------------------------------------------------------------------
	alignOpCode
_3E:	;@ ROL $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROL 7
;@----------------------------------------------------------------------------
	alignOpCode
_3F:	;@ BBR3 $nn,*
;@----------------------------------------------------------------------------
	opBBR 3
;@----------------------------------------------------------------------------
	alignOpCode
_40:	;@ RTI
;@----------------------------------------------------------------------------
	pop8 r0						;@ Pop H6280 flags and decode
	decodePF
	pop16						;@ Pop the return address
	encodePC
	eatcycles 7
	b h6280CheckIrqDisable		;@ Fixes Neutopia II (J), Sinistron & Talespin.
;@	fetch 7
;@----------------------------------------------------------------------------
	alignOpCode
_41:	;@ EOR ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opEOR 7
;@----------------------------------------------------------------------------
	alignOpCode
_42:	;@ SAY Swap A & Y
;@----------------------------------------------------------------------------
	opSWAP h6280a,h6280y
;@----------------------------------------------------------------------------
	alignOpCode
_43:	;@ TMA #$nn			Read from Memory mapper, !!! should this set flags?
;@----------------------------------------------------------------------------
	ldrb r0,[h6280pc],#1
	add r2,h6280optbl,#h6280MapperState
	clz r0,r0
	rsb r0,r0,#0x1f
	ldrb r0,[r2,r0]

	mov h6280a,r0,lsl#24
	fetch 4
;@----------------------------------------------------------------------------
	alignOpCode
_44:	;@ BSR *
;@----------------------------------------------------------------------------
	loadLastBank r1
	sub r0,h6280pc,r1
	push16
	ldrsb r0,[h6280pc],#1
	add h6280pc,h6280pc,r0
	fetch 8
;@----------------------------------------------------------------------------
	alignOpCode
_45:	;@ EOR $nn
;@----------------------------------------------------------------------------
	doZ
	opEOR 4
;@----------------------------------------------------------------------------
	alignOpCode
_46:	;@ LSR $nn
;@----------------------------------------------------------------------------
	doZ
	opLSR 6
;@----------------------------------------------------------------------------
	alignOpCode
_47:	;@ RMB4
;@----------------------------------------------------------------------------
	opRMB 4
;@----------------------------------------------------------------------------
	alignOpCode
_48:	;@ PHA
;@----------------------------------------------------------------------------
	mov r0,h6280a,lsr#24
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
	alignOpCode
_49:	;@ EOR #$nn
;@----------------------------------------------------------------------------
	doIMM
	opEOR 2
;@----------------------------------------------------------------------------
	alignOpCode
_4A:	;@ LSR
;@----------------------------------------------------------------------------
	movs h6280nz,h6280a,lsr#25	;@ Z, N never set.
	orr cycles,cycles,#CYC_C	;@ Prepare C
	getNextOpcode
	mov h6280a,h6280nz,lsl#24	;@ Result without garbage
	executeOpCode_c 2
;@----------------------------------------------------------------------------
	alignOpCode
_4B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_4C:	;@ JMP $nnnn
;@----------------------------------------------------------------------------
	ldrb r0,[h6280pc]
	ldrb h6280pc,[h6280pc,#1]
//	encodePC
	add r2,h6280optbl,#h6280RomMap
	mov r1,h6280pc,lsr#5
	ldr r1,[r2,r1,lsl#2]		;@ in: h6280pc.
	orr h6280pc,r0,h6280pc,lsl#8
	add h6280pc,h6280pc,r1
	getNextOpcode
	storeLastBank r1
	executeOpCode 4
;@----------------------------------------------------------------------------
	alignOpCode
_4D:	;@ EOR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opEOR 5
;@----------------------------------------------------------------------------
	alignOpCode
_4E:	;@ LSR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLSR 7
;@----------------------------------------------------------------------------
	alignOpCode
_4F:	;@ BBR4 $nn,*
;@----------------------------------------------------------------------------
	opBBR 4
;@----------------------------------------------------------------------------
	alignOpCode
_50:	;@ BVC *
;@----------------------------------------------------------------------------
	opBVC
;@----------------------------------------------------------------------------
	alignOpCode
_51:	;@ EOR ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opEOR 7
;@----------------------------------------------------------------------------
	alignOpCode
_52:	;@ EOR ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opEOR 7
;@----------------------------------------------------------------------------
	alignOpCode
_53:	;@ TAM #$nn			Write to Memory mapper
;@----------------------------------------------------------------------------
	readmemimm					;@ Which MPRs are affected (each bit represents one MPR)
	mov r1,h6280a,lsr#24		;@ Which bank in the ROM
	bl huMapper
	fetch 5
;@----------------------------------------------------------------------------
	alignOpCode
_54:	;@ CSL				Change Speed Low
;@----------------------------------------------------------------------------
	ldrb r1,[h6280optbl,#h6280ClockSpeed]
	cmp r1,#CYC_SHIFT
	beq noSpeedChg0
	mov r1,#CYC_SHIFT
	strb r1,[h6280optbl,#h6280ClockSpeed]
	and r0,cycles,#CYC_MASK
	mov cycles,cycles,asr#CYC_SHIFT+2
	orr cycles,r0,cycles,lsl#CYC_SHIFT
noSpeedChg0:
	fetch 3
	.pool
;@----------------------------------------------------------------------------
	alignOpCode
_55:	;@ EOR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opEOR 4
;@----------------------------------------------------------------------------
	alignOpCode
_56:	;@ LSR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opLSR 6
;@----------------------------------------------------------------------------
	alignOpCode
_57:	;@ RMB5
;@----------------------------------------------------------------------------
	opRMB 5
;@----------------------------------------------------------------------------
	alignOpCode
_58:	;@ CLI
;@----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
	eatcycles 2

	ldr r0,=cliFix						;@ Check IRQ lines after next instructions
	str r0,[h6280optbl,#h6280NextTimeout]
	ldr r1,[h6280optbl,#h6280ClockSpeed]
	mov r0,cycles,asr r1				;@ Cycles without flags
	str r0,[h6280optbl,#h6280OldCycles]	;@ Save old cycles so we can use them later on.
	clearcycles							;@ Clear cycles, save cpu bits

	fetch 0
	.pool
;@----------------------------------------------------------------------------
	alignOpCode
_59:	;@ EOR $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opEOR 5
;@----------------------------------------------------------------------------
	alignOpCode
_5A:	;@ PHY
;@----------------------------------------------------------------------------
	mov r0,h6280y,lsr#24
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
	alignOpCode
_5B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_5C:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_5D:	;@ EOR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opEOR 5
;@----------------------------------------------------------------------------
	alignOpCode
_5E:	;@ LSR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLSR 7
;@----------------------------------------------------------------------------
	alignOpCode
_5F:	;@ BBR5 $nn,*
;@----------------------------------------------------------------------------
	opBBRx 5					;@ Takeda Shingen
;@----------------------------------------------------------------------------
	alignOpCode
_60:	;@ RTS
;@----------------------------------------------------------------------------
	pop16
	add h6280pc,h6280pc,#1
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
	alignOpCode
_61:	;@ ADC ($nn,X)
;@----------------------------------------------------------------------------
	readmemiix
	opADC 7
;@----------------------------------------------------------------------------
	alignOpCode
_62:	;@ CLA
;@----------------------------------------------------------------------------
	getNextOpcode
	mov h6280a,#0
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_63:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_64:	;@ STZ $nn
;@----------------------------------------------------------------------------
	doZ
	opSTZ 4
;@----------------------------------------------------------------------------
	alignOpCode
_65:	;@ ADC $nn
;@----------------------------------------------------------------------------
	doZ
	readmem
	opADC 4
;@----------------------------------------------------------------------------
	alignOpCode
_66:	;@ ROR $nn
;@----------------------------------------------------------------------------
	doZ
	opROR 6
;@----------------------------------------------------------------------------
	alignOpCode
_67:	;@ RMB6
;@----------------------------------------------------------------------------
	opRMB 6
;@----------------------------------------------------------------------------
	alignOpCode
_68:	;@ PLA
;@----------------------------------------------------------------------------
	pop8 h6280nz
	getNextOpcode
	mov h6280a,h6280nz,lsl#24
	executeOpCode 4
;@----------------------------------------------------------------------------
	alignOpCode
_69:	;@ ADC #$nn
;@----------------------------------------------------------------------------
	doIMM
	readmem
	opADC 2
;@----------------------------------------------------------------------------
	alignOpCode
_6A:	;@ ROR
;@----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1	;@ Get C
	mov h6280a,h6280a,rrx
	movs h6280nz,h6280a,asr#24	;@ NZ
	and h6280a,h6280a,#0xff000000
	getNextOpcode
	adc cycles,cycles,cycles	;@ Set C
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_6B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_6C:	;@ JMP ($nnnn)
;@----------------------------------------------------------------------------
	doABS
	readmemabs
	mov h6280pc,r0
	add addy,addy,#1
	readmemabs
	orr h6280pc,h6280pc,r0,lsl#8
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
	alignOpCode
_6D:	;@ ADC $nnnn
;@----------------------------------------------------------------------------
	doABS
	readmem
	opADC 5
;@----------------------------------------------------------------------------
	alignOpCode
_6E:	;@ ROR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opROR 7
;@----------------------------------------------------------------------------
	alignOpCode
_6F:	;@ BBR6 $nn,*
;@----------------------------------------------------------------------------
	opBBRx 6
;@----------------------------------------------------------------------------
	alignOpCode
_70:	;@ BVS *
;@----------------------------------------------------------------------------
	opBVS
;@----------------------------------------------------------------------------
	alignOpCode
_71:	;@ ADC ($nn),Y
;@----------------------------------------------------------------------------
	readmemiiy
	opADC 7
;@----------------------------------------------------------------------------
	alignOpCode
_72:	;@ ADC ($nn)
;@----------------------------------------------------------------------------
	readmemzpa
	opADC 7
;@----------------------------------------------------------------------------
	alignOpCode
_73:	;@ TII $nnnn,$nnnn,#$nnnn	[Transfer Inc Inc]
;@----------------------------------------------------------------------------
	doTII
;@----------------------------------------------------------------------------
	alignOpCode
_74:	;@ STZ $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTZ 4
;@----------------------------------------------------------------------------
	alignOpCode
_75:	;@ ADC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readmem
	opADC 4
;@----------------------------------------------------------------------------
	alignOpCode
_76:	;@ ROR $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opROR 6
;@----------------------------------------------------------------------------
	alignOpCode
_77:	;@ RMB7 $nn
;@----------------------------------------------------------------------------
	opRMB 7
;@----------------------------------------------------------------------------
	alignOpCode
_78:	;@ SEI
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#CYC_I
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_79:	;@ ADC $nnnn,Y
;@----------------------------------------------------------------------------
	readmemaiy
	opADC 5
;@----------------------------------------------------------------------------
	alignOpCode
_7A:	;@ PLY
;@----------------------------------------------------------------------------
	pop8 h6280nz
	getNextOpcode
	mov h6280y,h6280nz,lsl#24
	executeOpCode 4
;@----------------------------------------------------------------------------
	alignOpCode
_7B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_7C:	;@ JMP ($nnnn,X)
;@----------------------------------------------------------------------------
	doAIX
	readmemabs
	mov h6280pc,r0
	add addy,addy,#1
	readmemabs
	orr h6280pc,h6280pc,r0,lsl#8
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
	alignOpCode
_7D:	;@ ADC $nnnn,X
;@----------------------------------------------------------------------------
	readmemaix
	opADC 5
;@----------------------------------------------------------------------------
	alignOpCode
_7E:	;@ ROR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opROR 7
;@----------------------------------------------------------------------------
	alignOpCode
_7F:	;@ BBR7 $nn,*
;@----------------------------------------------------------------------------
	opBBRx 7					;@ Speed hack version for Ninja Spirit.
;@----------------------------------------------------------------------------
	alignOpCode
_80:	;@ BRA					Branch always
;@----------------------------------------------------------------------------
	opBRA
;@----------------------------------------------------------------------------
	alignOpCode
_81:	;@ STA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opSTORE h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_82:	;@ CLX
;@----------------------------------------------------------------------------
	getNextOpcode
	mov h6280x,#0
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_83:	;@ TST #$nn,$nn
;@----------------------------------------------------------------------------
	ldrb h6280nz,[h6280pc],#1
	doZ
	opTST 7
;@----------------------------------------------------------------------------
	alignOpCode
_84:	;@ STY $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE h6280y 4
;@----------------------------------------------------------------------------
	alignOpCode
_85:	;@ STA $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_86:	;@ STX $nn
;@----------------------------------------------------------------------------
	doZ
	opSTORE h6280x 4
;@----------------------------------------------------------------------------
	alignOpCode
_87:	;@ SMB0 $nn
;@----------------------------------------------------------------------------
	opSMB 0
;@----------------------------------------------------------------------------
	alignOpCode
_88:	;@ DEY
;@----------------------------------------------------------------------------
	sub h6280y,h6280y,#0x01000000
	getNextOpcode
	mov h6280nz,h6280y,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_89:	;@ BIT #$nn
;@----------------------------------------------------------------------------
	doIMM
	opBIT 2
;@----------------------------------------------------------------------------
	alignOpCode
_8A:	;@ TXA
;@----------------------------------------------------------------------------
	mov h6280a,h6280x
	getNextOpcode
	mov h6280nz,h6280x,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_8B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_8C:	;@ STY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE h6280y 5
;@----------------------------------------------------------------------------
	alignOpCode
_8D:	;@ STA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_8E:	;@ STX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTORE h6280x 5
;@----------------------------------------------------------------------------
	alignOpCode
_8F:	;@ BBS0 $nn,*
;@----------------------------------------------------------------------------
	opBBSx 0
;@----------------------------------------------------------------------------
	alignOpCode
_90:	;@ BCC *
;@----------------------------------------------------------------------------
	opBCC
;@----------------------------------------------------------------------------
	alignOpCode
_91:	;@ STA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opSTORE h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_92:	;@ STA ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opSTORE h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_93:	;@ TST #$nn,$nnnn
;@----------------------------------------------------------------------------
	ldrb h6280nz,[h6280pc],#1
	doABS
	opTST 8
;@----------------------------------------------------------------------------
	alignOpCode
_94:	;@ STY $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE h6280y 4
;@----------------------------------------------------------------------------
	alignOpCode
_95:	;@ STA $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opSTORE h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_96:	;@ STX $nn,Y
;@----------------------------------------------------------------------------
	doZIYf
	opSTORE h6280x 4
;@----------------------------------------------------------------------------
	alignOpCode
_97:	;@ SMB1 $nn
;@----------------------------------------------------------------------------
	opSMB 1
;@----------------------------------------------------------------------------
	alignOpCode
_98:	;@ TYA
;@----------------------------------------------------------------------------
	mov h6280a,h6280y
	getNextOpcode
	mov h6280nz,h6280y,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_99:	;@ STA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opSTORE h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_9A:	;@ TXS
;@----------------------------------------------------------------------------
	getNextOpcode
	orr h6280sp,h6280x,#0x00000001
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_9B:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_9C:	;@ STZ $nnnn
;@----------------------------------------------------------------------------
	doABS
	opSTZ 5
;@----------------------------------------------------------------------------
	alignOpCode
_9D:	;@ STA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSTORE h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_9E:	;@ STZ $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opSTZ 5
;@----------------------------------------------------------------------------
	alignOpCode
_9F:	;@ BBS1 $nn,*
;@----------------------------------------------------------------------------
	opBBS 1
;@----------------------------------------------------------------------------
	alignOpCode
_A0:	;@ LDY #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD h6280y 2
;@----------------------------------------------------------------------------
	alignOpCode
_A1:	;@ LDA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opLOAD h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_A2:	;@ LDX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD h6280x 2
;@----------------------------------------------------------------------------
	alignOpCode
_A3:	;@ TST #$nn,$nn,X
;@----------------------------------------------------------------------------
	ldrb h6280nz,[h6280pc],#1
	doZIX
	opTST 7
;@----------------------------------------------------------------------------
	alignOpCode
_A4:	;@ LDY $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD h6280y 4
;@----------------------------------------------------------------------------
	alignOpCode
_A5:	;@ LDA $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_A6:	;@ LDX $nn
;@----------------------------------------------------------------------------
	doZ
	opLOAD h6280x 4
;@----------------------------------------------------------------------------
	alignOpCode
_A7:	;@ SMB2 $nn
;@----------------------------------------------------------------------------
	opSMB 2
;@----------------------------------------------------------------------------
	alignOpCode
_A8:	;@ TAY
;@----------------------------------------------------------------------------
	mov h6280y,h6280a
	getNextOpcode
	mov h6280nz,h6280a,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_A9:	;@ LDA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opLOAD h6280a 2
;@----------------------------------------------------------------------------
	alignOpCode
_AA:	;@ TAX
;@----------------------------------------------------------------------------
	mov h6280x,h6280a
	getNextOpcode
	mov h6280nz,h6280a,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_AB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_AC:	;@ LDY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD h6280y 5
;@----------------------------------------------------------------------------
	alignOpCode
_AD:	;@ LDA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_AE:	;@ LDX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opLOAD h6280x 5
;@----------------------------------------------------------------------------
	alignOpCode
_AF:	;@ BBS2 $nn,*
;@----------------------------------------------------------------------------
	opBBS 2
;@----------------------------------------------------------------------------
	alignOpCode
_B0:	;@ BCS *
;@----------------------------------------------------------------------------
	opBCS
;@----------------------------------------------------------------------------
	alignOpCode
_B1:	;@ LDA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opLOAD h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_B2:	;@ LDA ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opLOAD h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_B3:	;@ TST #$nn,$nnnn,X
;@----------------------------------------------------------------------------
	ldrb h6280nz,[h6280pc],#1
	doAIX
	opTST 8
;@----------------------------------------------------------------------------
	alignOpCode
_B4:	;@ LDY $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD h6280y 4
;@----------------------------------------------------------------------------
	alignOpCode
_B5:	;@ LDA $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opLOAD h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_B6:	;@ LDX $nn,Y
;@----------------------------------------------------------------------------
	doZIY
	opLOAD h6280x 4
;@----------------------------------------------------------------------------
	alignOpCode
_B7:	;@ SMB3 $nn
;@----------------------------------------------------------------------------
	opSMB 3
;@----------------------------------------------------------------------------
	alignOpCode
_B8:	;@ CLV
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#CYC_V
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_B9:	;@ LDA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_BA:	;@ TSX
;@----------------------------------------------------------------------------
	and h6280x,h6280sp,#0xFF000000
	getNextOpcode
	mov h6280nz,h6280sp,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_BB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_BC:	;@ LDY $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD h6280y 5
;@----------------------------------------------------------------------------
	alignOpCode
_BD:	;@ LDA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opLOAD h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_BE:	;@ LDX $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opLOAD h6280x 5
;@----------------------------------------------------------------------------
	alignOpCode
_BF:	;@ BBS3 $nn,*
;@----------------------------------------------------------------------------
	opBBS 3
;@----------------------------------------------------------------------------
	alignOpCode
_C0:	;@ CPY #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP h6280y 2
;@----------------------------------------------------------------------------
	alignOpCode
_C1:	;@ CMP ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opCOMP h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_C2:	;@ CLY
;@----------------------------------------------------------------------------
	getNextOpcode
	mov h6280y,#0
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_C3:	;@ TDD $nnnn,$nnnn,#$nnnn	[Transfer Dec Dec]
;@----------------------------------------------------------------------------
	doTDD
;@----------------------------------------------------------------------------
	alignOpCode
_C4:	;@ CPY $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP h6280y 4
;@----------------------------------------------------------------------------
	alignOpCode
_C5:	;@ CMP $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_C6:	;@ DEC $nn
;@----------------------------------------------------------------------------
	doZ
	opDEC 6
;@----------------------------------------------------------------------------
	alignOpCode
_C7:	;@ SMB4 $nn
;@----------------------------------------------------------------------------
	opSMB 4
;@----------------------------------------------------------------------------
	alignOpCode
_C8:	;@ INY
;@----------------------------------------------------------------------------
	add h6280y,h6280y,#0x01000000
	getNextOpcode
	mov h6280nz,h6280y,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_C9:	;@ CMP #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP h6280a 2
;@----------------------------------------------------------------------------
	alignOpCode
_CA:	;@ DEX
;@----------------------------------------------------------------------------
	sub h6280x,h6280x,#0x01000000
	getNextOpcode
	mov h6280nz,h6280x,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_CB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_CC:	;@ CPY $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP h6280y 5
;@----------------------------------------------------------------------------
	alignOpCode
_CD:	;@ CMP $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_CE:	;@ DEC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opDEC 7
;@----------------------------------------------------------------------------
	alignOpCode
_CF:	;@ BBS4 $nn,*
;@----------------------------------------------------------------------------
	opBBS 4
;@----------------------------------------------------------------------------
	alignOpCode
_D0:	;@ BNE *
;@----------------------------------------------------------------------------
	opBNE
;@----------------------------------------------------------------------------
	alignOpCode
_D1:	;@ CMP ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opCOMP h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_D2:	;@ CMP ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opCOMP h6280a 7
;@----------------------------------------------------------------------------
	alignOpCode
_D3:	;@ TIN $nnnn,$nnnn,#$nnnn	[Transfer Inc None]
;@----------------------------------------------------------------------------
	doTIN
;@----------------------------------------------------------------------------
	alignOpCode
_D4:	;@ CSH					Change Speed High
;@----------------------------------------------------------------------------
	ldrb r1,[h6280optbl,#h6280ClockSpeed]
	cmp r1,#CYC_SHIFT+2
	beq noSpeedChg1
	mov r1,#CYC_SHIFT+2
	strb r1,[h6280optbl,#h6280ClockSpeed]
	and r0,cycles,#CYC_MASK
	bic cycles,cycles,#CYC_MASK
	orr cycles,r0,cycles,lsl#2
noSpeedChg1:
	fetch 3
;@----------------------------------------------------------------------------
	alignOpCode
_D5:	;@ CMP $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opCOMP h6280a 4
;@----------------------------------------------------------------------------
	alignOpCode
_D6:	;@ DEC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opDEC 6
;@----------------------------------------------------------------------------
	alignOpCode
_D7:	;@ SMB5 $nn
;@----------------------------------------------------------------------------
	opSMB 5
;@----------------------------------------------------------------------------
	alignOpCode
_D8:	;@ CLD
;@----------------------------------------------------------------------------
	getNextOpcode
	bic cycles,cycles,#D
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_D9:	;@ CMP $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opCOMP h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_DA:	;@ PHX
;@----------------------------------------------------------------------------
	mov r0,h6280x,lsr#24
	push8 r0
	fetch 3
;@----------------------------------------------------------------------------
	alignOpCode
_DB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_DC:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_DD:	;@ CMP $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opCOMP h6280a 5
;@----------------------------------------------------------------------------
	alignOpCode
_DE:	;@ DEC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opDEC 7
;@----------------------------------------------------------------------------
	alignOpCode
_DF:	;@ BBS5 $nn,*
;@----------------------------------------------------------------------------
	opBBS 5
;@----------------------------------------------------------------------------
	alignOpCode
_E0:	;@ CPX #$nn
;@----------------------------------------------------------------------------
	doIMM
	opCOMP h6280x 2
;@----------------------------------------------------------------------------
	alignOpCode
_E1:	;@ SBC ($nn,X)
;@----------------------------------------------------------------------------
	readmemiix
	opSBC 7
;@----------------------------------------------------------------------------
	alignOpCode
_E2:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_E3:	;@ TIA $nnnn,$nnnn,#$nnnn	[Transfer Inc Alt]
;@----------------------------------------------------------------------------
	doTIA
;@----------------------------------------------------------------------------
	alignOpCode
_E4:	;@ CPX $nn
;@----------------------------------------------------------------------------
	doZ
	opCOMP h6280x 4
;@----------------------------------------------------------------------------
	alignOpCode
_E5:	;@ SBC $nn
;@----------------------------------------------------------------------------
	doZ
	readmem
	opSBC 4
;@----------------------------------------------------------------------------
	alignOpCode
_E6:	;@ INC $nn
;@----------------------------------------------------------------------------
	doZ
	opINC 6
;@----------------------------------------------------------------------------
	alignOpCode
_E7:	;@ SMB6 $nn
;@----------------------------------------------------------------------------
	opSMB 6
;@----------------------------------------------------------------------------
	alignOpCode
_E8:	;@ INX
;@----------------------------------------------------------------------------
	add h6280x,h6280x,#0x01000000
	getNextOpcode
	mov h6280nz,h6280x,asr#24
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_E9:	;@ SBC #$nn
;@----------------------------------------------------------------------------
	doIMM
	readmem
	opSBC 2
;@----------------------------------------------------------------------------
	alignOpCode
_EA:	;@ NOP
;@----------------------------------------------------------------------------
	fetch 2
nobbranch:
	fetch 6
;@----------------------------------------------------------------------------
	alignOpCode
_EB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_EC:	;@ CPX $nnnn
;@----------------------------------------------------------------------------
	doABS
	opCOMP h6280x 5
;@----------------------------------------------------------------------------
	alignOpCode
_ED:	;@ SBC $nnnn
;@----------------------------------------------------------------------------
	doABS
	readmem
	opSBC 5
;@----------------------------------------------------------------------------
	alignOpCode
_EE:	;@ INC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opINC 7
;@----------------------------------------------------------------------------
	alignOpCode
_EF:	;@ BBS6 $nn,*
;@----------------------------------------------------------------------------
	opBBS 6
;@----------------------------------------------------------------------------
	alignOpCode
_F0:	;@ BEQ *
;@----------------------------------------------------------------------------
	opBEQ
;@----------------------------------------------------------------------------
	alignOpCode
_F1:	;@ SBC ($nn),Y
;@----------------------------------------------------------------------------
	readmemiiy
	opSBC 7
;@----------------------------------------------------------------------------
	alignOpCode
_F2:	;@ SBC ($nn)
;@----------------------------------------------------------------------------
	readmemzpa
	opSBC 7
;@----------------------------------------------------------------------------
	alignOpCode
_F3:	;@ TAI $nnnn,$nnnn,#$nnnn	[Transfer Alt Inc]
;@----------------------------------------------------------------------------
	doTAI
;@----------------------------------------------------------------------------
	alignOpCode
_F4:	;@ SET set T
;@----------------------------------------------------------------------------
	ldr r1,=h6280OpTableT
	readmemimm
	eatcycles 2
	ldr pc,[r1,r0,lsl#2]
;@----------------------------------------------------------------------------
	alignOpCode
_F5:	;@ SBC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	readmem
	opSBC 4
;@----------------------------------------------------------------------------
	alignOpCode
_F6:	;@ INC $nn,X
;@----------------------------------------------------------------------------
	doZIXf
	opINC 6
;@----------------------------------------------------------------------------
	alignOpCode
_F7:	;@ SMB7 $nn
;@----------------------------------------------------------------------------
	opSMB 7
;@----------------------------------------------------------------------------
	alignOpCode
_F8:	;@ SED
;@----------------------------------------------------------------------------
	getNextOpcode
	orr cycles,cycles,#D
	executeOpCode 2
;@----------------------------------------------------------------------------
	alignOpCode
_F9:	;@ SBC $nnnn,Y
;@----------------------------------------------------------------------------
	readmemaiy
	opSBC 5
;@----------------------------------------------------------------------------
	alignOpCode
_FA:	;@ PLX
;@----------------------------------------------------------------------------
	pop8 h6280nz
	getNextOpcode
	mov h6280x,h6280nz,lsl#24
	executeOpCode 4
;@----------------------------------------------------------------------------
	alignOpCode
_FB:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@----------------------------------------------------------------------------
	alignOpCode
_FC:	;@ BAD OP
;@----------------------------------------------------------------------------
	b _xx
;@---------------------------------------------------------------------------
	alignOpCode
_FD:	;@ SBC $nnnn,X
;@----------------------------------------------------------------------------
	readmemaix
	opSBC 5
;@----------------------------------------------------------------------------
	alignOpCode
_FE:	;@ INC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opINC 7
;@----------------------------------------------------------------------------
	alignOpCode
_FF:	;@ BBS7 $nn,*
;@----------------------------------------------------------------------------
	opBBSx 7
;@----------------------------------------------------------------------------
	alignOpCode
opCodeEnd:
	.pool

;@----------------------------------------------------------------------------

transferPre:
	transferStart
;@----------------------------------------------------------------------------
huMapper:					;@ Rom paging..
;@----------------------------------------------------------------------------
	stmfd sp!,{r3-r8,lr}
	ldr r6,=MEMMAPTBL_
	ldr r2,[r6,r1,lsl#2]!
	ldr r3,[r6,#-1024]			;@ RDMEMTBL_
	ldr r4,[r6,#-2048]			;@ WRMEMTBL_

	cmp r1,#0x88
	bpl wrTbl
;@------------------------	SF2CE support
	cmp r1,#0x40
	ldrpl r6,SF2Mapper
	addpl r2,r2,r6,lsl#19
;@------------------------

wrTbl:
	clz r0,r0
	rsbs r0,r0,#0x1f
	ldr r5,=h6280MemReadTbl
	ldr r6,=h6280MemWriteTbl
	add r7,h6280optbl,#h6280RomMap
	add r8,h6280optbl,#h6280MapperState
	sub r2,r2,r0,lsl#13
	strpl r3,[r5,r0,lsl#2]		;@ readmem_tbl
	strpl r4,[r6,r0,lsl#2]		;@ writemem_tb
	strpl r2,[r7,r0,lsl#2]		;@ memmap_tbl
	strbpl r1,[r8,r0]			;@ MPR reg

//	cmp r0,#2
//	ldrpl r7,=MappingOps
//	ldrpl r6,=mem_R8 + 3*4
//	subpl r7,r7,r0,lsl#2
//	andpl r1,r1,#0x3F
//	ldrpl r1,[r7,r1,lsl#2]
//	strpl r1,[r6,r0,lsl#4]
;@----------------------------------------------------------------------------
flush:						;@ Update h6280pc & lastbank
;@----------------------------------------------------------------------------
	ldmfd sp!,{r3-r8,lr}
;@----------------------------------------------------------------------------
retranslatePCToOffset:
;@----------------------------------------------------------------------------
	loadLastBank r0
	sub h6280pc,h6280pc,r0
;@----------------------------------------------------------------------------
translatePCToOffset:		;@ In = h6280pc, out = translated h6280pc
;@----------------------------------------------------------------------------
	and r0,h6280pc,#0xE000
	add r1,h6280optbl,#h6280RomMap
	ldr r0,[r1,r0,lsr#11]		;@ In: h6280pc.
	storeLastBank r0
	add h6280pc,h6280pc,r0
	bx lr

SF2Mapper:
	.long 0

;@----------------------------------------------------------------------------
doBRK:						;@ Moved here for alignment
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA debug!
	loadLastBank r0
	add h6280pc,h6280pc,#2
	sub r0,h6280pc,r0
	push16						;@ Save PC

	encodeP (B)					;@ Save P
	ldr r12,interruptVectors	;@=BRK_VECTOR
	b irqContinue
;@----------------------------------------------------------------------------
outOfCycles:
	sub h6280pc,h6280pc,#1
	ldr pc,[h6280optbl,#h6280NextTimeout]
;@----------------------------------------------------------------------------
h6280SetNMIPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	movne r0,#8
	ldrb r1,[h6280optbl,#h6280NMIPin]
	strb r0,[h6280optbl,#h6280NMIPin]
	bics r1,r0,r1
	ldrbne r0,[h6280optbl,#h6280IrqPending]
	orrne r0,r0,r1
	strbne r0,[h6280optbl,#h6280IrqPending]
	bx lr
;@----------------------------------------------------------------------------
h6280SetIRQPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	ldrb r0,[h6280optbl,#h6280IrqPending]
	biceq r0,r0,#0x02
	orrne r0,r0,#0x02
	strb r0,[h6280optbl,#h6280IrqPending]
	bx lr

;@----------------------------------------------------------------------------
h6280RestoreAndRunXCycles:	;@ r0 = Number of fast cycles to run
;@----------------------------------------------------------------------------
	add r1,h6280optbl,#h6280Regs
	ldmia r1,{h6280nz-h6280pc,h6280zpage}	;@ Restore H6280 state
;@----------------------------------------------------------------------------
h6280RunXCycles:			;@ r0 = Number of fast cycles to run
;@----------------------------------------------------------------------------
;@----------------------------------------------------------------------------
timerScanlineHook:
;@----------------------------------------------------------------------------
	ldrb r1,[h6280optbl,#h6280TimerEnable]
	tst r1,#1
	beq timerDisabled
	ldr r1,[h6280optbl,#h6280TimerCycles]
	subs r2,r1,r0,lsl#2
	bpl noTIrqYet
;@- - - - - - - - - - - - - - - - -
	mov r0,r1,lsr#2
	rsb r1,r2,#0
	str r1,[h6280optbl,#h6280OldCycles]	;@ Save as many cycles as we steal so we can use them later on.
	adr r1,timerFix
	str r1,[h6280optbl,#h6280NextTimeout]
;@- - - - - - - - - - - - - - - - -
;@	setirqpin 4
	ldrb r1,[h6280optbl,#h6280TimerLatch]
	add r1,r1,#1
	add r2,r2,r1,lsl#12			;@ Latch x 1024 x 4
noTIrqYet:
	str r2,[h6280optbl,#h6280TimerCycles]
timerDisabled:
addCyclesNoTimer:
	ldrb r1,[h6280optbl,#h6280ClockSpeed]
	add cycles,cycles,r0,lsl r1			;@ Add cycles at current speed

;@----------------------------------------------------------------------------
h6280CheckIrqDisable:
	ldr r1,[h6280optbl,#h6280IrqPending]
	tst cycles,#CYC_I
	bicne r1,r1,#0x0700
	ands r0,r1,r1,lsr#8
	beq h6280Go
;@ - - - - - - - - - - - - - - - - - - -
//	bic r1,r1,#0x18			// Clear Reset and NMI
//	strb r1,[h6280optbl,#h6280_irqPending]
//whichIrq:
	clz r0,r0
	rsb r0,r0,#0x1f
	adr r2,interruptVectors
	ldr r12,[r2,r0,lsl#2]
;@----------------------------------------------------------
irq6280:					;@ Needs irq vector in r12
;@----------------------------------------------------------
	loadLastBank r0
	sub r0,h6280pc,r0
	push16						;@ Save PC

	encodeP (0)					;@ Save P
irqContinue:
	push8 r0

	orr cycles,cycles,#CYC_I	;@ Disable IRQ
	bic cycles,cycles,#CYC_D	;@ and decimal mode

	ldr r0,[h6280optbl,#h6280RomMap+7*4]
	ldrh h6280pc,[r0,r12]
	encodePC					;@ Get IRQ vector

	fetch 8

;@----------------------------------------------------------------------------
timerFix:				;@ Timer fix.
;@----------------------------------------------------------------------------
	setirqpin 4
;@----------------------------------------------------------------------------
cliFix:					;@ Cli should be delayed by 1 instruction.
;@----------------------------------------------------------------------------
	ldr r0,[h6280optbl,#h6280NextTimeout_]
	str r0,[h6280optbl,#h6280NextTimeout]
	ldr r0,[h6280optbl,#h6280OldCycles]
	b addCyclesNoTimer

;@----------------------------------------------------------------------------
interruptVectors:
;@----------------------------------------------------------------------------
	.long BRK_VECTOR		;@ External IRQ (CD-ROM)
	.long IRQ_VECTOR		;@ VDC IRQ
	.long TIM_VECTOR		;@ Timer IRQ
	.long NMI_VECTOR		;@ NMI IRQ
	.long RES_VECTOR		;@ Reset Vector


;@----------------------------------------------------------------------------
	.section .text			;@ Non time critical code
;@----------------------------------------------------------------------------
_xx:	;@ ???					Invalid opcode
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA debugg!
/*	[ DEBUG
		adr r0,_xx
		mov r1,#0
		bl debug_
	]*/
	fetch 2

;@----------------------------------------------------------------------------
opADC_Dec:
;@----------------------------------------------------------------------------
	opADCD
	fetch 5
;@----------------------------------------------------------------------------
opSBC_Dec:
;@----------------------------------------------------------------------------
	opSBCD
	fetch 5
;@----------------------------------------------------------------------------
opADCT_Dec:
;@----------------------------------------------------------------------------
	opADCTD
	fetch 5

;@----------------------------------------------------------------------------
T01:	;@ ORA ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opORAT 10
;@----------------------------------------------------------------------------
T05:	;@ ORA $nn
;@----------------------------------------------------------------------------
	doZ
	opORAT 7
;@----------------------------------------------------------------------------
T09:	;@ ORA #$nn
;@----------------------------------------------------------------------------
	doIMM
	opORAT 5
;@----------------------------------------------------------------------------
T0D:	;@ ORA $nnnn
;@----------------------------------------------------------------------------
	doABS
	opORAT 8
;@----------------------------------------------------------------------------
T11:	;@ ORA ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opORAT 10
;@----------------------------------------------------------------------------
T12:	;@ ORA ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opORAT 10
;@----------------------------------------------------------------------------
T15:	;@ ORA $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opORAT 7
;@----------------------------------------------------------------------------
T19:	;@ ORA $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opORAT 8
;@----------------------------------------------------------------------------
T1D:	;@ ORA $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opORAT 8

;@----------------------------------------------------------------------------
T21:	;@ AND ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opANDT 10
;@----------------------------------------------------------------------------
T25:	;@ AND $nn
;@----------------------------------------------------------------------------
	doZ
	opANDT 7
;@----------------------------------------------------------------------------
T29:	;@ AND #$nn
;@----------------------------------------------------------------------------
	doIMM
	opANDT 5
;@----------------------------------------------------------------------------
T2D:	;@ AND $nnnn
;@----------------------------------------------------------------------------
	doABS
	opANDT 8
;@----------------------------------------------------------------------------
T31:	;@ AND ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opANDT 10
;@----------------------------------------------------------------------------
T32:	;@ AND ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opANDT 10
;@----------------------------------------------------------------------------
T35:	;@ AND $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opANDT 7
;@----------------------------------------------------------------------------
T39:	;@ AND $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opANDT 8
;@----------------------------------------------------------------------------
T3D:	;@ AND $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opANDT 8

;@----------------------------------------------------------------------------
T41:	;@ EOR ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opEORT 10
;@----------------------------------------------------------------------------
T45:	;@ EOR $nn
;@----------------------------------------------------------------------------
	doZ
	opEORT 7
;@----------------------------------------------------------------------------
T49:	;@ EOR #$nn
;@----------------------------------------------------------------------------
	doIMM
	opEORT 5
;@----------------------------------------------------------------------------
T4D:	;@ EOR $nnnn
;@----------------------------------------------------------------------------
	doABS
	opEORT 8
;@----------------------------------------------------------------------------
T51:	;@ EOR ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opEORT 10
;@----------------------------------------------------------------------------
T52:	;@ EOR ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opEORT 10
;@----------------------------------------------------------------------------
T55:	;@ EOR $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opEORT 7
;@----------------------------------------------------------------------------
T59:	;@ EOR $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opEORT 8
;@----------------------------------------------------------------------------
T5D:	;@ EOR $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opEORT 8
;@----------------------------------------------------------------------------
T61:	;@ EOR ($nn,X)
;@----------------------------------------------------------------------------
	doIIX
	opEORT 10

;@----------------------------------------------------------------------------
T65:	;@ ADC $nn
;@----------------------------------------------------------------------------
	doZ
	opADCT 7
;@----------------------------------------------------------------------------
T69:	;@ ADC #$nn
;@----------------------------------------------------------------------------
	doIMM
	opADCT 5
;@----------------------------------------------------------------------------
T6D:	;@ ADC $nnnn
;@----------------------------------------------------------------------------
	doABS
	opADCT 8
;@----------------------------------------------------------------------------
T71:	;@ ADC ($nn),Y
;@----------------------------------------------------------------------------
	doIIY
	opADCT 10
;@----------------------------------------------------------------------------
T72:	;@ ADC ($nn)
;@----------------------------------------------------------------------------
	doZPI
	opADCT 10
;@----------------------------------------------------------------------------
T75:	;@ ADC $nn,X
;@----------------------------------------------------------------------------
	doZIX
	opADCT 7
;@----------------------------------------------------------------------------
T79:	;@ ADC $nnnn,Y
;@----------------------------------------------------------------------------
	doAIY
	opADCT 8
;@----------------------------------------------------------------------------
T7D:	;@ ADC $nnnn,X
;@----------------------------------------------------------------------------
	doAIX
	opADCT 8
;@----------------------------------------------------------------------------

;@----------------------------------------------------------------------------
h6280Reset:				;@ Called by cpuReset (r0-r9 are free to use)
	.type h6280Reset STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

	mov r1,#0
	str r1,[h6280optbl,#h6280MapperState]
	str r1,[h6280optbl,#h6280MapperState+4]
	bl reInitMapperData

;@---cpu reset
	mov h6280a,#0
	mov h6280x,#0
	mov h6280y,#0
	mov h6280nz,#0
	ldr h6280sp,=0xFF000001
	ldr r0,=MEMMAPTBL_
	ldr h6280zpage,[r0,#0xF8*4]
	mov cycles,#CYC_I			;@ V=0, D=0, C=0, I=1 disable IRQ.

	mov r0,#CYC_SHIFT
	strb r0,[h6280optbl,#h6280ClockSpeed]			;@ Slow
	str h6280a,[h6280optbl,#h6280IrqPending]		;@ Irq pending reset
	strb h6280a,[h6280optbl,#h6280IrqDisable]		;@ Irq disable reset
	mov r0,#0x1F
	strb r0,[h6280optbl,#h6280IrqPending+1]			;@ Irq disable mask reset

	ldr r0,[h6280optbl,#h6280RomMap+7*4]
	ldr r1,=RES_VECTOR
	ldrh h6280pc,[r0,r1]
	encodePC					;@ Get RESET vector

	add r0,h6280optbl,#h6280Regs
	stmia r0,{h6280nz-h6280pc,h6280zpage}
	ldmfd sp!,{pc}
;@----------------------------------------------------------------------------
h6280SaveState:			;@ In r0=destination, r1=h6280optbl. Out r0=state size.
	.type   h6280SaveState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{r4,h6280optbl,lr}

	sub r4,r0,#h6280Regs
	mov h6280optbl,r1

	add r1,h6280optbl,#h6280Regs
	mov r2,#h6280StateEnd-h6280StateStart	;@ Right now 0x38
	bl memcpy

	;@ Convert copied PC to not offseted.
	ldr r0,[r4,#h6280RegPC]					;@ Offsetted m6809pc
	loadLastBank r2
	sub r0,r0,r2
	str r0,[r4,#h6280RegPC]					;@ Normal m6809pc

	ldmfd sp!,{r4,h6280optbl,lr}
	mov r0,#h6280StateEnd-h6280StateStart	;@ Right now 0x38
	bx lr
;@----------------------------------------------------------------------------
h6280LoadState:			;@ In r0=h6280optbl, r1=source. Out r0=state size.
	.type   h6280LoadState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{h6280pc,h6280optbl,lr}

	mov h6280optbl,r0
	add r0,h6280optbl,#h6280Regs
	mov r2,#h6280StateEnd-h6280StateStart	;@ Right now 0x38
	bl memcpy

	ldr h6280pc,[h6280optbl,#h6280RegPC]	;@ Normal h6280pc
	encodePC
	str h6280pc,[h6280optbl,#h6280RegPC]	;@ Rewrite offseted h6280pc

	ldmfd sp!,{h6280pc,h6280optbl,lr}
;@----------------------------------------------------------------------------
h6280GetStateSize:		;@ Out r0=state size.
	.type   h6280GetStateSize STT_FUNC
;@----------------------------------------------------------------------------
	mov r0,#h6280StateEnd-h6280StateStart	;@ Right now 0x38
	bx lr
;@----------------------------------------------------------------------------
reInitMapperData:
;@----------------------------------------------------------------------------
	add r0,h6280optbl,#h6280MapperState
;@----------------------------------------------------------------------------
setupHuMapper:
;@----------------------------------------------------------------------------
	stmfd sp!,{r4-r5,lr}
	mov r4,r0
	mov r5,#0x01000000
huDataLoop:
	mov r0,r5,lsr#24
	ldrb r1,[r4],#1
	bl huMapper
	movs r5,r5,lsl#1
	bne huDataLoop

	ldmfd sp!,{r4-r5,pc}
;@----------------------------------------------------------------------------
timerRead:					;@ 0x0C00-0x0FFF
;@----------------------------------------------------------------------------
	ldr r0,[h6280optbl,#h6280TimerCycles]
	sub r0,r0,#0x01000
	and r0,r0,#0x7F000
	ldrb r1,[h6280optbl,#h6280IoBuffer]
	and r1,r1,#0x80
	orr r0,r1,r0,lsr#12
	strb r0,[h6280optbl,#h6280IoBuffer]
	bx lr
;@----------------------------------------------------------------------------
timerWrite:					;@ 0x0C00-0x0FFF
;@----------------------------------------------------------------------------
	strb r0,[h6280optbl,#h6280IoBuffer]
	tst addy,#1
	bne timer1Write
;@----------------------------------------------------------------------------
timer0Write:				;@ 0x0C00
;@----------------------------------------------------------------------------
	and r0,r0,#0x7f
	strb r0,[h6280optbl,#h6280TimerLatch]
	bx lr
;@----------------------------------------------------------------------------
timer1Write:				;@ 0x0C01
;@----------------------------------------------------------------------------
	ldrb r1,[h6280optbl,#h6280TimerEnable]
	strb r0,[h6280optbl,#h6280TimerEnable]
	bic r0,r0,r1
	tst r0,#1
	bxeq lr						;@ Only reload counter if going from 0 -> 1

	ldrb r0,[h6280optbl,#h6280TimerLatch]
	add r0,r0,#1
	mov r0,r0,lsl#12			;@ x(1024x4)
	ldrb r1,[h6280optbl,#h6280ClockSpeed]
	sub r1,r1,#2
	sub r0,r0,cycles,asr r1
	str r0,[h6280optbl,#h6280TimerCycles]
	bx lr

;@----------------------------------------------------------------------------
irqRead:					;@ 0x1400-0x17FF
;@----------------------------------------------------------------------------
	ldrb r0,[h6280optbl,#h6280IoBuffer]
	and r1,addy,#3
	cmp r1,#2
	ldrbeq r1,[h6280optbl,#h6280IrqDisable]	;@ IRQ2_R
	ldrbhi r1,[h6280optbl,#h6280IrqPending]	;@ IRQ3_R
	andpl r1,r1,#0x07
	bicpl r0,r0,#0x07
	orrpl r0,r0,r1
	strbpl r0,[h6280optbl,#h6280IoBuffer]
	bx lr
;@----------------------------------------------------------------------------
irqWrite:					;@ 0x1400-0x17FF
;@----------------------------------------------------------------------------
	strb r0,[h6280optbl,#h6280IoBuffer]
	and r1,addy,#3
	cmp r1,#2
	beq irq2Write
	bhi irq3Write
	bx lr
;@----------------------------------------------------------------------------
irq2Write:					;@ Set disabled IRQs
;@----------------------------------------------------------------------------
	and r0,r0,#0x07
	strb r0,[h6280optbl,#h6280IrqDisable]	;@ Check for pending IRQ's?
	eor r1,r0,#0x1F
	strb r1,[h6280optbl,#h6280IrqPending+1]	;@ Mask used for irq check.
;@------------------------
;@	ldrb r1,irqPending
;@	bic r0,r1,r0
;@	bne H6280_checkirqdisable	;@ Either this or...
;@	movne cycles,#0				;@ This.
;@------------------------
	bx lr
;@----------------------------------------------------------------------------
irq3Write:					;@ Acknowledge Timer IRQ
;@----------------------------------------------------------------------------
	clearirqpin 4
	bx lr

;@----------------------------------------------------------------------------
#ifdef ARM9
	.section .dtcm, "ax", %progbits				;@ For the NDS
#endif
;@----------------------------------------------------------------------------
h6280OpTableT:
	.long _00,T01,_02,_03,_04,T05,_06,_07,_08,T09,_0A,_xx,_0C,T0D,_0E,_0F
	.long _10,T11,T12,_13,_14,T15,_16,_17,_18,T19,_1A,_xx,_1C,T1D,_1E,_1F
	.long _20,T21,_22,_23,_24,T25,_26,_27,_28,T29,_2A,_xx,_2C,T2D,_2E,_2F
	.long _30,T31,T32,_xx,_34,T35,_36,_37,_38,T39,_3A,_xx,_3C,T3D,_3E,_3F
	.long _40,T41,_42,_43,_44,T45,_46,_47,_48,T49,_4A,_xx,_4C,T4D,_4E,_4F
	.long _50,T51,T52,_53,_54,T55,_56,_57,_58,T59,_5A,_xx,_xx,T5D,_5E,_5F
	.long _60,T61,_62,_xx,_64,T65,_66,_67,_68,T69,_6A,_xx,_6C,T6D,_6E,_6F
	.long _70,T71,T72,_73,_74,T75,_76,_77,_78,T79,_7A,_xx,_7C,T7D,_7E,_7F
	.long _80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_8A,_xx,_8C,_8D,_8E,_8F
	.long _90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_9A,_xx,_9C,_9D,_9E,_9F
	.long _A0,_A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_AF
	.long _B0,_B1,_B2,_B3,_B4,_B5,_B6,_B7,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_BF
	.long _C0,_C1,_C2,_C3,_C4,_C5,_C6,_C7,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_CF
	.long _D0,_D1,_D2,_D3,_D4,_D5,_D6,_D7,_D8,_D9,_DA,_xx,_xx,_DD,_DE,_DF
	.long _E0,_E1,_xx,_E3,_E4,_E5,_E6,_E7,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_EF
	.long _F0,_F1,_F2,_F3,_F4,_F5,_F6,_F7,_F8,_F9,_FA,_xx,_xx,_FD,_FE,_FF

;@----------------------------------------------------------------------------

#endif // #ifdef __arm__
